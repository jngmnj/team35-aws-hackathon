"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const uuid_1 = require("uuid");
const database_1 = require("../../shared/database");
const auth_1 = require("../../shared/auth");
const utils_1 = require("../../shared/utils");
const handler = async (event) => {
    try {
        if (event.httpMethod === 'OPTIONS') {
            return { statusCode: 200, headers: {}, body: '' };
        }
        const authResult = (0, auth_1.verifyToken)(event.headers.Authorization || event.headers.authorization);
        if (!authResult.success) {
            return (0, utils_1.createErrorResponse)(401, 'Unauthorized');
        }
        const userId = authResult.userId;
        const method = event.httpMethod;
        const pathParameters = event.pathParameters;
        switch (method) {
            case 'GET':
                return await getDocuments(userId);
            case 'POST':
                return await createDocument(userId, JSON.parse(event.body || '{}'));
            case 'PUT':
                return await updateDocument(pathParameters?.id, JSON.parse(event.body || '{}'));
            case 'DELETE':
                return await deleteDocument(pathParameters?.id);
            default:
                return (0, utils_1.createErrorResponse)(405, 'Method not allowed');
        }
    }
    catch (error) {
        console.error('Error:', error);
        return (0, utils_1.createErrorResponse)(500, 'Internal server error');
    }
};
exports.handler = handler;
async function getDocuments(userId) {
    const result = await database_1.docClient.send(new lib_dynamodb_1.QueryCommand({
        TableName: database_1.TABLE_NAMES.DOCUMENTS,
        IndexName: 'userId-index',
        KeyConditionExpression: 'userId = :userId',
        ExpressionAttributeValues: {
            ':userId': userId,
        },
    }));
    return (0, utils_1.createSuccessResponse)({
        documents: result.Items || [],
        total: result.Count || 0,
    });
}
async function createDocument(userId, body) {
    const { type, title, content } = body;
    const documentId = (0, uuid_1.v4)();
    const document = {
        documentId,
        userId,
        type,
        title,
        content,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
    };
    await database_1.docClient.send(new lib_dynamodb_1.PutCommand({
        TableName: database_1.TABLE_NAMES.DOCUMENTS,
        Item: document,
    }));
    return (0, utils_1.createSuccessResponse)(document, 201);
}
async function updateDocument(documentId, body) {
    const { title, content } = body;
    await database_1.docClient.send(new lib_dynamodb_1.UpdateCommand({
        TableName: database_1.TABLE_NAMES.DOCUMENTS,
        Key: { documentId },
        UpdateExpression: 'SET title = :title, content = :content, updatedAt = :updatedAt',
        ExpressionAttributeValues: {
            ':title': title,
            ':content': content,
            ':updatedAt': new Date().toISOString(),
        },
    }));
    return (0, utils_1.createSuccessResponse)({ message: 'Document updated successfully' });
}
async function deleteDocument(documentId) {
    await database_1.docClient.send(new lib_dynamodb_1.DeleteCommand({
        TableName: database_1.TABLE_NAMES.DOCUMENTS,
        Key: { documentId },
    }));
    return (0, utils_1.createSuccessResponse)({ message: 'Document deleted successfully' });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZnVuY3Rpb25zL2RvY3VtZW50cy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx3REFBK0Y7QUFDL0YsK0JBQW9DO0FBQ3BDLG9EQUErRDtBQUMvRCw0Q0FBZ0Q7QUFDaEQsOENBQWdGO0FBRXpFLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxLQUEyQixFQUFrQyxFQUFFO0lBQzNGLElBQUksQ0FBQztRQUNILElBQUksS0FBSyxDQUFDLFVBQVUsS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUNuQyxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUNwRCxDQUFDO1FBRUQsTUFBTSxVQUFVLEdBQUcsSUFBQSxrQkFBVyxFQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDM0YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN4QixPQUFPLElBQUEsMkJBQW1CLEVBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ2xELENBQUM7UUFFRCxNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTyxDQUFDO1FBQ2xDLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7UUFDaEMsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQztRQUU1QyxRQUFRLE1BQU0sRUFBRSxDQUFDO1lBQ2YsS0FBSyxLQUFLO2dCQUNSLE9BQU8sTUFBTSxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDcEMsS0FBSyxNQUFNO2dCQUNULE9BQU8sTUFBTSxjQUFjLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxJ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a0I7SUFDOUMsTUFBTSxvQkFBUyxDQUFDLElBQUksQ0FBQyxJQUFJLDRCQUFhLENBQUM7UUFDckMsU0FBUyxFQUFFLHNCQUFXLENBQUMsU0FBUztRQUNoQyxHQUFHLEVBQUUsRUFBRSxVQUFVLEVBQUU7S0FDcEIsQ0FBQyxDQUFDLENBQUM7SUFFSixPQUFPLElBQUEsNkJBQXFCLEVBQUMsRUFBRSxPQUFPLEVBQUUsK0JBQStCLEVBQUUsQ0FBQyxDQUFDO0FBQzdFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUElHYXRld2F5UHJveHlFdmVudCwgQVBJR2F0ZXdheVByb3h5UmVzdWx0IH0gZnJvbSAnYXdzLWxhbWJkYSc7XG5pbXBvcnQgeyBQdXRDb21tYW5kLCBRdWVyeUNvbW1hbmQsIFVwZGF0ZUNvbW1hbmQsIERlbGV0ZUNvbW1hbmQgfSBmcm9tICdAYXdzLXNkay9saWItZHluYW1vZGInO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCc7XG5pbXBvcnQgeyBkb2NDbGllbnQsIFRBQkxFX05BTUVTIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2RhdGFiYXNlJztcbmltcG9ydCB7IHZlcmlmeVRva2VuIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2F1dGgnO1xuaW1wb3J0IHsgY3JlYXRlRXJyb3JSZXNwb25zZSwgY3JlYXRlU3VjY2Vzc1Jlc3BvbnNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IEFQSUdhdGV3YXlQcm94eUV2ZW50KTogUHJvbWlzZTxBUElHYXRld2F5UHJveHlSZXN1bHQ+ID0+IHtcbiAgdHJ5IHtcbiAgICBpZiAoZXZlbnQuaHR0cE1ldGhvZCA9PT0gJ09QVElPTlMnKSB7XG4gICAgICByZXR1cm4geyBzdGF0dXNDb2RlOiAyMDAsIGhlYWRlcnM6IHt9LCBib2R5OiAnJyB9O1xuICAgIH1cblxuICAgIGNvbnN0IGF1dGhSZXN1bHQgPSB2ZXJpZnlUb2tlbihldmVudC5oZWFkZXJzLkF1dGhvcml6YXRpb24gfHwgZXZlbnQuaGVhZGVycy5hdXRob3JpemF0aW9uKTtcbiAgICBpZiAoIWF1dGhSZXN1bHQuc3VjY2Vzcykge1xuICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoNDAxLCAnVW5hdXRob3JpemVkJyk7XG4gICAgfVxuXG4gICAgY29uc3QgdXNlcklkID0gYXV0aFJlc3VsdC51c2VySWQhO1xuICAgIGNvbnN0IG1ldGhvZCA9IGV2ZW50Lmh0dHBNZXRob2Q7XG4gICAgY29uc3QgcGF0aFBhcmFtZXRlcnMgPSBldmVudC5wYXRoUGFyYW1ldGVycztcblxuICAgIHN3aXRjaCAobWV0aG9kKSB7XG4gICAgICBjYXNlICdHRVQnOlxuICAgICAgICByZXR1cm4gYXdhaXQgZ2V0RG9jdW1lbnRzKHVzZXJJZCk7XG4gICAgICBjYXNlICdQT1NUJzpcbiAgICAgICAgcmV0dXJuIGF3YWl0IGNyZWF0ZURvY3VtZW50KHVzZXJJZCwgSlNPTi5wYXJzZShldmVudC5ib2R5IHx8ICd7fScpKTtcbiAgICAgIGNhc2UgJ1BVVCc6XG4gICAgICAgIHJldHVybiBhd2FpdCB1cGRhdGVEb2N1bWVudChwYXRoUGFyYW1ldGVycz8uaWQhLCBKU09OLnBhcnNlKGV2ZW50LmJvZHkgfHwgJ3t9JykpO1xuICAgICAgY2FzZSAnREVMRVRFJzpcbiAgICAgICAgcmV0dXJuIGF3YWl0IGRlbGV0ZURvY3VtZW50KHBhdGhQYXJhbWV0ZXJzPy5pZCEpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoNDA1LCAnTWV0aG9kIG5vdCBhbGxvd2VkJyk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOicsIGVycm9yKTtcbiAgICByZXR1cm4gY3JlYXRlRXJyb3JSZXNwb25zZSg1MDAsICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InKTtcbiAgfVxufTtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0RG9jdW1lbnRzKHVzZXJJZDogc3RyaW5nKSB7XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRvY0NsaWVudC5zZW5kKG5ldyBRdWVyeUNvbW1hbmQoe1xuICAgIFRhYmxlTmFtZTogVEFCTEVfTkFNRVMuRE9DVU1FTlRTLFxuICAgIEluZGV4TmFtZTogJ3VzZXJJZC1pbmRleCcsXG4gICAgS2V5Q29uZGl0aW9uRXhwcmVzc2lvbjogJ3VzZXJJZCA9IDp1c2VySWQnLFxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IHtcbiAgICAgICc6dXNlcklkJzogdXNlcklkLFxuICAgIH0sXG4gIH0pKTtcblxuICByZXR1cm4gY3JlYXRlU3VjY2Vzc1Jlc3BvbnNlKHtcbiAgICBkb2N1bWVudHM6IHJlc3VsdC5JdGVtcyB8fCBbXSxcbiAgICB0b3RhbDogcmVzdWx0LkNvdW50IHx8IDAsXG4gIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVEb2N1bWVudCh1c2VySWQ6IHN0cmluZywgYm9keTogYW55KSB7XG4gIGNvbnN0IHsgdHlwZSwgdGl0bGUsIGNvbnRlbnQgfSA9IGJvZHk7XG4gIGNvbnN0IGRvY3VtZW50SWQgPSB1dWlkdjQoKTtcblxuICBjb25zdCBkb2N1bWVudCA9IHtcbiAgICBkb2N1bWVudElkLFxuICAgIHVzZXJJZCxcbiAgICB0eXBlLFxuICAgIHRpdGxlLFxuICAgIGNvbnRlbnQsXG4gICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gIH07XG5cbiAgYXdhaXQgZG9jQ2xpZW50LnNlbmQobmV3IFB1dENvbW1hbmQoe1xuICAgIFRhYmxlTmFtZTogVEFCTEVfTkFNRVMuRE9DVU1FTlRTLFxuICAgIEl0ZW06IGRvY3VtZW50LFxuICB9KSk7XG5cbiAgcmV0dXJuIGNyZWF0ZVN1Y2Nlc3NSZXNwb25zZShkb2N1bWVudCwgMjAxKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlRG9jdW1lbnQoZG9jdW1lbnRJZDogc3RyaW5nLCBib2R5OiBhbnkpIHtcbiAgY29uc3QgeyB0aXRsZSwgY29udGVudCB9ID0gYm9keTtcblxuICBhd2FpdCBkb2NDbGllbnQuc2VuZChuZXcgVXBkYXRlQ29tbWFuZCh7XG4gICAgVGFibGVOYW1lOiBUQUJMRV9OQU1FUy5ET0NVTUVOVFMsXG4gICAgS2V5OiB7IGRvY3VtZW50SWQgfSxcbiAgICBVcGRhdGVFeHByZXNzaW9uOiAnU0VUIHRpdGxlID0gOnRpdGxlLCBjb250ZW50ID0gOmNvbnRlbnQsIHVwZGF0ZWRBdCA9IDp1cGRhdGVkQXQnLFxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IHtcbiAgICAgICc6dGl0bGUnOiB0aXRsZSxcbiAgICAgICc6Y29udGVudCc6IGNvbnRlbnQsXG4gICAgICAnOnVwZGF0ZWRBdCc6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICB9LFxuICB9KSk7XG5cbiAgcmV0dXJuIGNyZWF0ZVN1Y2Nlc3NSZXNwb25zZSh7IG1lc3NhZ2U6ICdEb2N1bWVudCB1cGRhdGVkIHN1Y2Nlc3NmdWxseScgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRlbGV0ZURvY3VtZW50KGRvY3VtZW50SWQ6IHN0cmluZykge1xuICBhd2FpdCBkb2NDbGllbnQuc2VuZChuZXcgRGVsZXRlQ29tbWFuZCh7XG4gICAgVGFibGVOYW1lOiBUQUJMRV9OQU1FUy5ET0NVTUVOVFMsXG4gICAgS2V5OiB7IGRvY3VtZW50SWQgfSxcbiAgfSkpO1xuXG4gIHJldHVybiBjcmVhdGVTdWNjZXNzUmVzcG9uc2UoeyBtZXNzYWdlOiAnRG9jdW1lbnQgZGVsZXRlZCBzdWNjZXNzZnVsbHknIH0pO1xufSJdfQ==
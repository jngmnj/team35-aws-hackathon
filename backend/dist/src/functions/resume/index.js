"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const uuid_1 = require("uuid");
const database_1 = require("../../shared/database");
const auth_1 = require("../../shared/auth");
const bedrock_1 = require("../../shared/bedrock");
const utils_1 = require("../../shared/utils");
const handler = async (event) => {
    try {
        if (event.httpMethod === 'OPTIONS') {
            return { statusCode: 200, headers: {}, body: '' };
        }
        const authResult = (0, auth_1.verifyToken)(event.headers.Authorization || event.headers.authorization);
        if (!authResult.success) {
            return (0, utils_1.createErrorResponse)(401, 'Unauthorized');
        }
        const userId = authResult.userId;
        const method = event.httpMethod;
        switch (method) {
            case 'GET':
                return await getResumes(userId, event.queryStringParameters);
            case 'POST':
                return await createResume(userId, JSON.parse(event.body || '{}'));
            default:
                return (0, utils_1.createErrorResponse)(405, 'Method not allowed');
        }
    }
    catch (error) {
        console.error('Error:', error);
        return (0, utils_1.createErrorResponse)(500, 'Internal server error');
    }
};
exports.handler = handler;
async function getResumes(userId, queryParams) {
    const jobCategory = queryParams?.jobCategory;
    let queryCommand;
    if (jobCategory) {
        queryCommand = new lib_dynamodb_1.QueryCommand({
            TableName: database_1.TABLE_NAMES.RESUMES,
            IndexName: 'userId-jobCategory-index',
            KeyConditionExpression: 'userId = :userId AND jobCategory = :jobCategory',
            ExpressionAttributeValues: {
                ':userId': userId,
                ':jobCategory': jobCategory,
            },
        });
    }
    else {
        queryCommand = new lib_dynamodb_1.QueryCommand({
            TableName: database_1.TABLE_NAMES.RESUMES,
            IndexName: 'userId-jobCategory-index',
            KeyConditionExpression: 'userId = :userId',
            ExpressionAttributeValues: {
                ':userId': userId,
            },
        });
    }
    const result = await database_1.docClient.send(queryCommand);
    return (0, utils_1.createSuccessResponse)({
        resumes: result.Items || [],
        total: result.Count || 0,
    });
}
async function createResume(userId, body) {
    const { documents, jobCategory, jobTitle } = body;
    if (!documents || !Array.isArray(documents)) {
        return (0, utils_1.createErrorResponse)(400, 'Documents array is required');
    }
    if (!jobCategory) {
        return (0, utils_1.createErrorResponse)(400, 'Job category is required');
    }
    try {
        const resumeResult = await (0, bedrock_1.generateResume)({ documents, jobCategory, jobTitle });
        const resumeId = (0, uuid_1.v4)();
        const resume = {
            resumeId,
            userId,
            jobCategory,
            jobTitle,
            content: resumeResult,
            createdAt: new Date().toISOString(),
        };
        await database_1.docClient.send(new lib_dynamodb_1.PutCommand({
            TableName: database_1.TABLE_NAMES.RESUMES,
            Item: resume,
        }));
        return (0, utils_1.createSuccessResponse)(resume, 201);
    }
    catch (error) {
        console.error('이력서 생성 실패:', error);
        return (0, utils_1.createErrorResponse)(500, '이력서 생성 서비스 일시 중단. 잠시 후 다시 시도해주세요.');
    }
}
//# sourceMappingURL=data:application/json;base64,
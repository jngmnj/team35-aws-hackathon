"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const uuid_1 = require("uuid");
const database_1 = require("../../shared/database");
const auth_1 = require("../../shared/auth");
const bedrock_1 = require("../../shared/bedrock");
const utils_1 = require("../../shared/utils");
const handler = async (event) => {
    try {
        if (event.httpMethod === 'OPTIONS') {
            return { statusCode: 200, headers: {}, body: '' };
        }
        const authResult = (0, auth_1.verifyToken)(event.headers.Authorization || event.headers.authorization);
        if (!authResult.success) {
            return (0, utils_1.createErrorResponse)(401, 'Unauthorized');
        }
        const userId = authResult.userId;
        const method = event.httpMethod;
        switch (method) {
            case 'GET':
                return await getResumes(userId, event.queryStringParameters);
            case 'POST':
                return await createResume(userId, JSON.parse(event.body || '{}'));
            default:
                return (0, utils_1.createErrorResponse)(405, 'Method not allowed');
        }
    }
    catch (error) {
        console.error('Error:', error);
        return (0, utils_1.createErrorResponse)(500, 'Internal server error');
    }
};
exports.handler = handler;
async function getResumes(userId, queryParams) {
    const jobCategory = queryParams?.jobCategory;
    let queryCommand;
    if (jobCategory) {
        queryCommand = new lib_dynamodb_1.QueryCommand({
            TableName: database_1.TABLE_NAMES.RESUMES,
            IndexName: 'userId-jobCategory-index',
            KeyConditionExpression: 'userId = :userId AND jobCategory = :jobCategory',
            ExpressionAttributeValues: {
                ':userId': userId,
                ':jobCategory': jobCategory,
            },
        });
    }
    else {
        queryCommand = new lib_dynamodb_1.QueryCommand({
            TableName: database_1.TABLE_NAMES.RESUMES,
            IndexName: 'userId-jobCategory-index',
            KeyConditionExpression: 'userId = :userId',
            ExpressionAttributeValues: {
                ':userId': userId,
            },
        });
    }
    const result = await database_1.docClient.send(queryCommand);
    return (0, utils_1.createSuccessResponse)({
        resumes: result.Items || [],
        total: result.Count || 0,
    });
}
async function createResume(userId, body) {
    const { documents, jobCategory, jobTitle } = body;
    if (!documents || !Array.isArray(documents)) {
        return (0, utils_1.createErrorResponse)(400, 'Documents array is required');
    }
    if (!jobCategory) {
        return (0, utils_1.createErrorResponse)(400, 'Job category is required');
    }
    const resumeResult = await (0, bedrock_1.generateResume)({ documents, jobCategory, jobTitle });
    const resumeId = (0, uuid_1.v4)();
    const resume = {
        resumeId,
        userId,
        jobCategory,
        jobTitle,
        content: resumeResult,
        createdAt: new Date().toISOString(),
    };
    await database_1.docClient.send(new lib_dynamodb_1.PutCommand({
        TableName: database_1.TABLE_NAMES.RESUMES,
        Item: resume,
    }));
    return (0, utils_1.createSuccessResponse)(resume, 201);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZnVuY3Rpb25zL3Jlc3VtZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx3REFBaUU7QUFDakUsK0JBQW9DO0FBQ3BDLG9EQUErRDtBQUMvRCw0Q0FBZ0Q7QUFDaEQsa0RBQXNEO0FBQ3RELDhDQUFnRjtBQUV6RSxNQUFNLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBMkIsRUFBa0MsRUFBRTtJQUMzRixJQUFJLENBQUM7UUFDSCxJQUFJLEtBQUssQ0FBQyxVQUFVLEtBQUssU0FBUyxFQUFFLENBQUM7WUFDbkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDcEQsQ0FBQztRQUVELE1BQU0sVUFBVSxHQUFHLElBQUEsa0JBQVcsRUFBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGFBQWEsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzNGLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDeEIsT0FBTyxJQUFBLDJCQUFtQixFQUFDLEdBQUcsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUNsRCxDQUFDO1FBRUQsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU8sQ0FBQztRQUNsQyxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO1FBRWhDLFFBQVEsTUFBTSxFQUFFLENBQUM7WUFDZixLQUFLLEtBQUs7Z0JBQ1IsT0FBTyxNQUFNLFVBQVUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7WUFDL0QsS0FBSyxNQUFNO2dCQUNULE9BQU8sTUFBTSxZQUFZLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3BFO2dCQUNFLE9BQU8sSUFBQSwyQkFBbUIsRUFBQyxHQUFHLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztRQUMxRCxDQUFDO0lBQ0gsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMvQixPQUFPLElBQUEsMkJBQW1CLEVBQUMsR0FBRyxFQUFFLHVCQUF1QixDQUFDLENBQUM7SUFDM0QsQ0FBQztBQUNILENBQUMsQ0FBQztBQTFCVyxRQUFBLE9BQU8sV0EwQmxCO0FBRUYsS0FBSyxVQUFVLFVBQVUsQ0FBQyxNQUFjLEVBQUUsV0FBZ0I7SUFDeEQsTUFBTSxXQUFXLEdBQUcsV0FBVyxFQUFFLFdBQVcsQ0FBQztJQUU3QyxJQUFJLFlBQVksQ0FBQztJQUNqQixJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ2hCLFlBQVksR0FBRyxJQUFJLDJCQUFZLENBQUM7WUFDOUIsU0FBUyxFQUFFLHNCQUFXLENBQUMsT0FBTztZQUM5QixTQUFTLEVBQUUsMEJBQTBCO1lBQ3JDLHNCQUFzQixFQUFFLGlEQUFpRDtZQUN6RSx5QkFBeUIsRUFBRTtnQkFDekIsU0FBUyxFQUFFLE1BQU07Z0JBQ2pCLGNBQWMsRUFBRSxXQUFXO2FBQzVCO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztTQUFNLENBQUM7UUFDTixZQUFZLEdBQUcsSUFBSSwyQkFBWSxDQUFDO1lBQzlCLFNBQVMsRUFBRSxzQkFBVyxDQUFDLE9BQU87WUFDOUIsU0FBUyxFQUFFLDBCQUEwQjtZQUNyQyxzQkFBc0IsRUFBRSxrQkFBa0I7WUFDMUMseUJBQXlCLEVBQUU7Z0JBQ3pCLFNBQVMsRUFBRSxNQUFNO2FBQ2xCO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU0sTUFBTSxHQUFHLE1BQU0sb0JBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFFbEQsT0FBTyxJQUFBLDZCQUFxQixFQUFDO1FBQzNCLE9BQU8sRUFBRSxNQUFNLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDM0IsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLElBQUksQ0FBQztLQUN6QixDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsS0FBSyxVQUFVLFlBQVksQ0FBQyxNQUFjLEVBQUUsSUFBUztJQUNuRCxNQUFNLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFFbEQsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztRQUM1QyxPQUFPLElBQUEsMkJBQW1CLEVBQUMsR0FBRyxFQUFFLDZCQUE2QixDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVELElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNqQixPQUFPLElBQUEsMkJBQW1CLEVBQUMsR0FBRyxFQUFFLDBCQUEwQixDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVELE1BQU0sWUFBWSxHQUFHLE1BQU0sSUFBQSx3QkFBYyxFQUFDLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ2hGLE1BQU0sUUFBUSxHQUFHLElBQUEsU0FBTSxHQUFFLENBQUM7SUFFMUIsTUFBTSxNQUFNLEdBQUc7UUFDYixRQUFRO1FBQ1IsTUFBTTtRQUNOLFdBQVc7UUFDWCxRQUFRO1FBQ1IsT0FBTyxFQUFFLFlBQVk7UUFDckIsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFO0tBQ3BDLENBQUM7SUFFRixNQUFNLG9CQUFTLENBQUMsSUFBSSxDQUFDLElBQUkseUJBQVUsQ0FBQztRQUNsQyxTQUFTLEVBQUUsc0JBQVcsQ0FBQyxPQUFPO1FBQzlCLElBQUksRUFBRSxNQUFNO0tBQ2IsQ0FBQyxDQUFDLENBQUM7SUFFSixPQUFPLElBQUEsNkJBQXFCLEVBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzVDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUElHYXRld2F5UHJveHlFdmVudCwgQVBJR2F0ZXdheVByb3h5UmVzdWx0IH0gZnJvbSAnYXdzLWxhbWJkYSc7XG5pbXBvcnQgeyBQdXRDb21tYW5kLCBRdWVyeUNvbW1hbmQgfSBmcm9tICdAYXdzLXNkay9saWItZHluYW1vZGInO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCc7XG5pbXBvcnQgeyBkb2NDbGllbnQsIFRBQkxFX05BTUVTIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2RhdGFiYXNlJztcbmltcG9ydCB7IHZlcmlmeVRva2VuIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2F1dGgnO1xuaW1wb3J0IHsgZ2VuZXJhdGVSZXN1bWUgfSBmcm9tICcuLi8uLi9zaGFyZWQvYmVkcm9jayc7XG5pbXBvcnQgeyBjcmVhdGVFcnJvclJlc3BvbnNlLCBjcmVhdGVTdWNjZXNzUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMnO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChldmVudDogQVBJR2F0ZXdheVByb3h5RXZlbnQpOiBQcm9taXNlPEFQSUdhdGV3YXlQcm94eVJlc3VsdD4gPT4ge1xuICB0cnkge1xuICAgIGlmIChldmVudC5odHRwTWV0aG9kID09PSAnT1BUSU9OUycpIHtcbiAgICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDIwMCwgaGVhZGVyczoge30sIGJvZHk6ICcnIH07XG4gICAgfVxuXG4gICAgY29uc3QgYXV0aFJlc3VsdCA9IHZlcmlmeVRva2VuKGV2ZW50LmhlYWRlcnMuQXV0aG9yaXphdGlvbiB8fCBldmVudC5oZWFkZXJzLmF1dGhvcml6YXRpb24pO1xuICAgIGlmICghYXV0aFJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICByZXR1cm4gY3JlYXRlRXJyb3JSZXNwb25zZSg0MDEsICdVbmF1dGhvcml6ZWQnKTtcbiAgICB9XG5cbiAgICBjb25zdCB1c2VySWQgPSBhdXRoUmVzdWx0LnVzZXJJZCE7XG4gICAgY29uc3QgbWV0aG9kID0gZXZlbnQuaHR0cE1ldGhvZDtcblxuICAgIHN3aXRjaCAobWV0aG9kKSB7XG4gICAgICBjYXNlICdHRVQnOlxuICAgICAgICByZXR1cm4gYXdhaXQgZ2V0UmVzdW1lcyh1c2VySWQsIGV2ZW50LnF1ZXJ5U3RyaW5nUGFyYW1ldGVycyk7XG4gICAgICBjYXNlICdQT1NUJzpcbiAgICAgICAgcmV0dXJuIGF3YWl0IGNyZWF0ZVJlc3VtZSh1c2VySWQsIEpTT04ucGFyc2UoZXZlbnQuYm9keSB8fCAne30nKSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gY3JlYXRlRXJyb3JSZXNwb25zZSg0MDUsICdNZXRob2Qgbm90IGFsbG93ZWQnKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3I6JywgZXJyb3IpO1xuICAgIHJldHVybiBjcmVhdGVFcnJvclJlc3BvbnNlKDUwMCwgJ0ludGVybmFsIHNlcnZlciBlcnJvcicpO1xuICB9XG59O1xuXG5hc3luYyBmdW5jdGlvbiBnZXRSZXN1bWVzKHVzZXJJZDogc3RyaW5nLCBxdWVyeVBhcmFtczogYW55KSB7XG4gIGNvbnN0IGpvYkNhdGVnb3J5ID0gcXVlcnlQYXJhbXM/LmpvYkNhdGVnb3J5O1xuXG4gIGxldCBxdWVyeUNvbW1hbmQ7XG4gIGlmIChqb2JDYXRlZ29yeSkge1xuICAgIHF1ZXJ5Q29tbWFuZCA9IG5ldyBRdWVyeUNvbW1hbmQoe1xuICAgICAgVGFibGVOYW1lOiBUQUJMRV9OQU1FUy5SRVNVTUVTLFxuICAgICAgSW5kZXhOYW1lOiAndXNlcklkLWpvYkNhdGVnb3J5LWluZGV4JyxcbiAgICAgIEtleUNvbmRpdGlvbkV4cHJlc3Npb246ICd1c2VySWQgPSA6dXNlcklkIEFORCBqb2JDYXRlZ29yeSA9IDpqb2JDYXRlZ29yeScsXG4gICAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7XG4gICAgICAgICc6dXNlcklkJzogdXNlcklkLFxuICAgICAgICAnOmpvYkNhdGVnb3J5Jzogam9iQ2F0ZWdvcnksXG4gICAgICB9LFxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHF1ZXJ5Q29tbWFuZCA9IG5ldyBRdWVyeUNvbW1hbmQoe1xuICAgICAgVGFibGVOYW1lOiBUQUJMRV9OQU1FUy5SRVNVTUVTLFxuICAgICAgSW5kZXhOYW1lOiAndXNlcklkLWpvYkNhdGVnb3J5LWluZGV4JyxcbiAgICAgIEtleUNvbmRpdGlvbkV4cHJlc3Npb246ICd1c2VySWQgPSA6dXNlcklkJyxcbiAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IHtcbiAgICAgICAgJzp1c2VySWQnOiB1c2VySWQsXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZG9jQ2xpZW50LnNlbmQocXVlcnlDb21tYW5kKTtcblxuICByZXR1cm4gY3JlYXRlU3VjY2Vzc1Jlc3BvbnNlKHtcbiAgICByZXN1bWVzOiByZXN1bHQuSXRlbXMgfHwgW10sXG4gICAgdG90YWw6IHJlc3VsdC5Db3VudCB8fCAwLFxuICB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlUmVzdW1lKHVzZXJJZDogc3RyaW5nLCBib2R5OiBhbnkpIHtcbiAgY29uc3QgeyBkb2N1bWVudHMsIGpvYkNhdGVnb3J5LCBqb2JUaXRsZSB9ID0gYm9keTtcblxuICBpZiAoIWRvY3VtZW50cyB8fCAhQXJyYXkuaXNBcnJheShkb2N1bWVudHMpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoNDAwLCAnRG9jdW1lbnRzIGFycmF5IGlzIHJlcXVpcmVkJyk7XG4gIH1cblxuICBpZiAoIWpvYkNhdGVnb3J5KSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoNDAwLCAnSm9iIGNhdGVnb3J5IGlzIHJlcXVpcmVkJyk7XG4gIH1cblxuICBjb25zdCByZXN1bWVSZXN1bHQgPSBhd2FpdCBnZW5lcmF0ZVJlc3VtZSh7IGRvY3VtZW50cywgam9iQ2F0ZWdvcnksIGpvYlRpdGxlIH0pO1xuICBjb25zdCByZXN1bWVJZCA9IHV1aWR2NCgpO1xuXG4gIGNvbnN0IHJlc3VtZSA9IHtcbiAgICByZXN1bWVJZCxcbiAgICB1c2VySWQsXG4gICAgam9iQ2F0ZWdvcnksXG4gICAgam9iVGl0bGUsXG4gICAgY29udGVudDogcmVzdW1lUmVzdWx0LFxuICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICB9O1xuXG4gIGF3YWl0IGRvY0NsaWVudC5zZW5kKG5ldyBQdXRDb21tYW5kKHtcbiAgICBUYWJsZU5hbWU6IFRBQkxFX05BTUVTLlJFU1VNRVMsXG4gICAgSXRlbTogcmVzdW1lLFxuICB9KSk7XG5cbiAgcmV0dXJuIGNyZWF0ZVN1Y2Nlc3NSZXNwb25zZShyZXN1bWUsIDIwMSk7XG59Il19
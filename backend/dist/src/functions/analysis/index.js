"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const uuid_1 = require("uuid");
const database_1 = require("../../shared/database");
const auth_1 = require("../../shared/auth");
const bedrock_1 = require("../../shared/bedrock");
const utils_1 = require("../../shared/utils");
const handler = async (event) => {
    try {
        if (event.httpMethod === 'OPTIONS') {
            return { statusCode: 200, headers: {}, body: '' };
        }
        const authResult = (0, auth_1.verifyToken)(event.headers.Authorization || event.headers.authorization);
        if (!authResult.success) {
            return (0, utils_1.createErrorResponse)(401, 'Unauthorized');
        }
        const userId = authResult.userId;
        const method = event.httpMethod;
        switch (method) {
            case 'GET':
                return await getAnalysis(userId);
            case 'POST':
                return await createAnalysis(userId, JSON.parse(event.body || '{}'));
            default:
                return (0, utils_1.createErrorResponse)(405, 'Method not allowed');
        }
    }
    catch (error) {
        console.error('Error:', error);
        return (0, utils_1.createErrorResponse)(500, 'Internal server error');
    }
};
exports.handler = handler;
async function getAnalysis(userId) {
    const result = await database_1.docClient.send(new lib_dynamodb_1.QueryCommand({
        TableName: database_1.TABLE_NAMES.ANALYSIS,
        IndexName: 'userId-index',
        KeyConditionExpression: 'userId = :userId',
        ExpressionAttributeValues: {
            ':userId': userId,
        },
    }));
    return (0, utils_1.createSuccessResponse)({
        analyses: result.Items || [],
        total: result.Count || 0,
    });
}
async function createAnalysis(userId, body) {
    const { documents } = body;
    if (!documents || !Array.isArray(documents)) {
        return (0, utils_1.createErrorResponse)(400, 'Documents array is required');
    }
    const analysisResult = await (0, bedrock_1.generatePersonalityAnalysis)({ documents });
    const analysisId = (0, uuid_1.v4)();
    const analysis = {
        analysisId,
        userId,
        result: analysisResult,
        createdAt: new Date().toISOString(),
    };
    await database_1.docClient.send(new lib_dynamodb_1.PutCommand({
        TableName: database_1.TABLE_NAMES.ANALYSIS,
        Item: analysis,
    }));
    return (0, utils_1.createSuccessResponse)(analysis, 201);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZnVuY3Rpb25zL2FuYWx5c2lzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHdEQUFpRTtBQUNqRSwrQkFBb0M7QUFDcEMsb0RBQStEO0FBQy9ELDRDQUFnRDtBQUNoRCxrREFBbUU7QUFDbkUsOENBQWdGO0FBRXpFLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxLQUEyQixFQUFrQyxFQUFFO0lBQzNGLElBQUksQ0FBQztRQUNILElBQUksS0FBSyxDQUFDLFVBQVUsS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUNuQyxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUNwRCxDQUFDO1FBRUQsTUFBTSxVQUFVLEdBQUcsSUFBQSxrQkFBVyxFQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDM0YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN4QixPQUFPLElBQUEsMkJBQW1CLEVBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ2xELENBQUM7UUFFRCxNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTyxDQUFDO1FBQ2xDLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7UUFFaEMsUUFBUSxNQUFNLEVBQUUsQ0FBQztZQUNmLEtBQUssS0FBSztnQkFDUixPQUFPLE1BQU0sV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ25DLEtBQUssTUFBTTtnQkFDVCxPQUFPLE1BQU0sY0FBYyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN0RTtnQkFDRSxPQUFPLElBQUEsMkJBQW1CLEVBQUMsR0FBRyxFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFDMUQsQ0FBQztJQUNILENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0IsT0FBTyxJQUFBLDJCQUFtQixFQUFDLEdBQUcsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO0lBQzNELENBQUM7QUFDSCxDQUFDLENBQUM7QUExQlcsUUFBQSxPQUFPLFdBMEJsQjtBQUVGLEtBQUssVUFBVSxXQUFXLENBQUMsTUFBYztJQUN2QyxNQUFNLE1BQU0sR0FBRyxNQUFNLG9CQUFTLENBQUMsSUFBSSxDQUFDLElBQUksMkJBQVksQ0FBQztRQUNuRCxTQUFTLEVBQUUsc0JBQVcsQ0FBQyxRQUFRO1FBQy9CLFNBQVMsRUFBRSxjQUFjO1FBQ3pCLHNCQUFzQixFQUFFLGtCQUFrQjtRQUMxQyx5QkFBeUIsRUFBRTtZQUN6QixTQUFTLEVBQUUsTUFBTTtTQUNsQjtLQUNGLENBQUMsQ0FBQyxDQUFDO0lBRUosT0FBTyxJQUFBLDZCQUFxQixFQUFDO1FBQzNCLFFBQVEsRUFBRSxNQUFNLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDNUIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLElBQUksQ0FBQztLQUN6QixDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsS0FBSyxVQUFVLGNBQWMsQ0FBQyxNQUFjLEVBQUUsSUFBUztJQUNyRCxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDO0lBRTNCLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUM7UUFDNUMsT0FBTyxJQUFBLDJCQUFtQixFQUFDLEdBQUcsRUFBRSw2QkFBNkIsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFRCxNQUFNLGNBQWMsR0FBRyxNQUFNLElBQUEscUNBQTJCLEVBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQ3hFLE1BQU0sVUFBVSxHQUFHLElBQUEsU0FBTSxHQUFFLENBQUM7SUFFNUIsTUFBTSxRQUFRLEdBQUc7UUFDZixVQUFVO1FBQ1YsTUFBTTtRQUNOLE1BQU0sRUFBRSxjQUFjO1FBQ3RCLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRTtLQUNwQyxDQUFDO0lBRUYsTUFBTSxvQkFBUyxDQUFDLElBQUksQ0FBQyxJQUFJLHlCQUFVLENBQUM7UUFDbEMsU0FBUyxFQUFFLHNCQUFXLENBQUMsUUFBUTtRQUMvQixJQUFJLEVBQUUsUUFBUTtLQUNmLENBQUMsQ0FBQyxDQUFDO0lBRUosT0FBTyxJQUFBLDZCQUFxQixFQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUM5QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBJR2F0ZXdheVByb3h5RXZlbnQsIEFQSUdhdGV3YXlQcm94eVJlc3VsdCB9IGZyb20gJ2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgUHV0Q29tbWFuZCwgUXVlcnlDb21tYW5kIH0gZnJvbSAnQGF3cy1zZGsvbGliLWR5bmFtb2RiJztcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gJ3V1aWQnO1xuaW1wb3J0IHsgZG9jQ2xpZW50LCBUQUJMRV9OQU1FUyB9IGZyb20gJy4uLy4uL3NoYXJlZC9kYXRhYmFzZSc7XG5pbXBvcnQgeyB2ZXJpZnlUb2tlbiB9IGZyb20gJy4uLy4uL3NoYXJlZC9hdXRoJztcbmltcG9ydCB7IGdlbmVyYXRlUGVyc29uYWxpdHlBbmFseXNpcyB9IGZyb20gJy4uLy4uL3NoYXJlZC9iZWRyb2NrJztcbmltcG9ydCB7IGNyZWF0ZUVycm9yUmVzcG9uc2UsIGNyZWF0ZVN1Y2Nlc3NSZXNwb25zZSB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscyc7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudCk6IFByb21pc2U8QVBJR2F0ZXdheVByb3h5UmVzdWx0PiA9PiB7XG4gIHRyeSB7XG4gICAgaWYgKGV2ZW50Lmh0dHBNZXRob2QgPT09ICdPUFRJT05TJykge1xuICAgICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogMjAwLCBoZWFkZXJzOiB7fSwgYm9keTogJycgfTtcbiAgICB9XG5cbiAgICBjb25zdCBhdXRoUmVzdWx0ID0gdmVyaWZ5VG9rZW4oZXZlbnQuaGVhZGVycy5BdXRob3JpemF0aW9uIHx8IGV2ZW50LmhlYWRlcnMuYXV0aG9yaXphdGlvbik7XG4gICAgaWYgKCFhdXRoUmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgIHJldHVybiBjcmVhdGVFcnJvclJlc3BvbnNlKDQwMSwgJ1VuYXV0aG9yaXplZCcpO1xuICAgIH1cblxuICAgIGNvbnN0IHVzZXJJZCA9IGF1dGhSZXN1bHQudXNlcklkITtcbiAgICBjb25zdCBtZXRob2QgPSBldmVudC5odHRwTWV0aG9kO1xuXG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgIGNhc2UgJ0dFVCc6XG4gICAgICAgIHJldHVybiBhd2FpdCBnZXRBbmFseXNpcyh1c2VySWQpO1xuICAgICAgY2FzZSAnUE9TVCc6XG4gICAgICAgIHJldHVybiBhd2FpdCBjcmVhdGVBbmFseXNpcyh1c2VySWQsIEpTT04ucGFyc2UoZXZlbnQuYm9keSB8fCAne30nKSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gY3JlYXRlRXJyb3JSZXNwb25zZSg0MDUsICdNZXRob2Qgbm90IGFsbG93ZWQnKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3I6JywgZXJyb3IpO1xuICAgIHJldHVybiBjcmVhdGVFcnJvclJlc3BvbnNlKDUwMCwgJ0ludGVybmFsIHNlcnZlciBlcnJvcicpO1xuICB9XG59O1xuXG5hc3luYyBmdW5jdGlvbiBnZXRBbmFseXNpcyh1c2VySWQ6IHN0cmluZykge1xuICBjb25zdCByZXN1bHQgPSBhd2FpdCBkb2NDbGllbnQuc2VuZChuZXcgUXVlcnlDb21tYW5kKHtcbiAgICBUYWJsZU5hbWU6IFRBQkxFX05BTUVTLkFOQUxZU0lTLFxuICAgIEluZGV4TmFtZTogJ3VzZXJJZC1pbmRleCcsXG4gICAgS2V5Q29uZGl0aW9uRXhwcmVzc2lvbjogJ3VzZXJJZCA9IDp1c2VySWQnLFxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IHtcbiAgICAgICc6dXNlcklkJzogdXNlcklkLFxuICAgIH0sXG4gIH0pKTtcblxuICByZXR1cm4gY3JlYXRlU3VjY2Vzc1Jlc3BvbnNlKHtcbiAgICBhbmFseXNlczogcmVzdWx0Lkl0ZW1zIHx8IFtdLFxuICAgIHRvdGFsOiByZXN1bHQuQ291bnQgfHwgMCxcbiAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUFuYWx5c2lzKHVzZXJJZDogc3RyaW5nLCBib2R5OiBhbnkpIHtcbiAgY29uc3QgeyBkb2N1bWVudHMgfSA9IGJvZHk7XG5cbiAgaWYgKCFkb2N1bWVudHMgfHwgIUFycmF5LmlzQXJyYXkoZG9jdW1lbnRzKSkge1xuICAgIHJldHVybiBjcmVhdGVFcnJvclJlc3BvbnNlKDQwMCwgJ0RvY3VtZW50cyBhcnJheSBpcyByZXF1aXJlZCcpO1xuICB9XG5cbiAgY29uc3QgYW5hbHlzaXNSZXN1bHQgPSBhd2FpdCBnZW5lcmF0ZVBlcnNvbmFsaXR5QW5hbHlzaXMoeyBkb2N1bWVudHMgfSk7XG4gIGNvbnN0IGFuYWx5c2lzSWQgPSB1dWlkdjQoKTtcblxuICBjb25zdCBhbmFseXNpcyA9IHtcbiAgICBhbmFseXNpc0lkLFxuICAgIHVzZXJJZCxcbiAgICByZXN1bHQ6IGFuYWx5c2lzUmVzdWx0LFxuICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICB9O1xuXG4gIGF3YWl0IGRvY0NsaWVudC5zZW5kKG5ldyBQdXRDb21tYW5kKHtcbiAgICBUYWJsZU5hbWU6IFRBQkxFX05BTUVTLkFOQUxZU0lTLFxuICAgIEl0ZW06IGFuYWx5c2lzLFxuICB9KSk7XG5cbiAgcmV0dXJuIGNyZWF0ZVN1Y2Nlc3NSZXNwb25zZShhbmFseXNpcywgMjAxKTtcbn0iXX0=
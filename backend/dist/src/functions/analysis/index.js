"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const uuid_1 = require("uuid");
const database_1 = require("./shared/database");
const auth_1 = require("./shared/auth");
const bedrock_1 = require("./shared/bedrock");
const utils_1 = require("./shared/utils");
const handler = async (event) => {
    try {
        if (event.httpMethod === 'OPTIONS') {
            return {
                statusCode: 200,
                headers: {
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
                    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
                },
                body: ''
            };
        }
        const authResult = (0, auth_1.verifyToken)(event.headers.Authorization || event.headers.authorization);
        if (!authResult.success) {
            return (0, utils_1.createErrorResponse)(401, 'Unauthorized');
        }
        const userId = authResult.userId;
        const method = event.httpMethod;
        switch (method) {
            case 'GET':
                return await getAnalysis(userId);
            case 'POST':
                let requestBody = {};
                if (event.body) {
                    try {
                        requestBody = JSON.parse(event.body);
                    }
                    catch (error) {
                        return (0, utils_1.createErrorResponse)(400, 'Invalid JSON in request body');
                    }
                }
                return await createAnalysis(userId, requestBody);
            default:
                return (0, utils_1.createErrorResponse)(405, 'Method not allowed');
        }
    }
    catch (error) {
        console.error('Error:', error);
        return (0, utils_1.createErrorResponse)(500, 'Internal server error');
    }
};
exports.handler = handler;
async function getAnalysis(userId) {
    const result = await database_1.docClient.send(new lib_dynamodb_1.QueryCommand({
        TableName: database_1.TABLE_NAMES.ANALYSIS,
        IndexName: 'userId-index',
        KeyConditionExpression: 'userId = :userId',
        ExpressionAttributeValues: {
            ':userId': userId,
        },
    }));
    return (0, utils_1.createSuccessResponse)({
        analyses: result.Items || [],
        total: result.Count || 0,
    });
}
async function createAnalysis(userId, body) {
    // Get user's documents from database
    const result = await database_1.docClient.send(new lib_dynamodb_1.QueryCommand({
        TableName: database_1.TABLE_NAMES.DOCUMENTS,
        IndexName: 'userId-index',
        KeyConditionExpression: 'userId = :userId',
        ExpressionAttributeValues: {
            ':userId': userId,
        },
    }));
    const documents = (result.Items || []);
    if (documents.length === 0) {
        return (0, utils_1.createErrorResponse)(400, 'No documents found for analysis');
    }
    try {
        const analysisResult = await (0, bedrock_1.generatePersonalityAnalysis)({ documents });
        const analysisId = (0, uuid_1.v4)();
        const analysis = {
            analysisId,
            userId,
            result: analysisResult,
            createdAt: new Date().toISOString(),
        };
        await database_1.docClient.send(new lib_dynamodb_1.PutCommand({
            TableName: database_1.TABLE_NAMES.ANALYSIS,
            Item: analysis,
        }));
        return (0, utils_1.createSuccessResponse)(analysis, 201);
    }
    catch (error) {
        console.error('AI 분석 실패:', error);
        return (0, utils_1.createErrorResponse)(500, 'AI 분석 서비스 일시 중단. 잠시 후 다시 시도해주세요.');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZnVuY3Rpb25zL2FuYWx5c2lzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHdEQUFpRTtBQUNqRSwrQkFBb0M7QUFDcEMsZ0RBQTJEO0FBQzNELHdDQUE0QztBQUM1Qyw4Q0FBK0Q7QUFDL0QsMENBQTRFO0FBRXJFLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxLQUEyQixFQUFrQyxFQUFFO0lBQzNGLElBQUksQ0FBQztRQUNILElBQUksS0FBSyxDQUFDLFVBQVUsS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUNuQyxPQUFPO2dCQUNMLFVBQVUsRUFBRSxHQUFHO2dCQUNmLE9BQU8sRUFBRTtvQkFDUCw2QkFBNkIsRUFBRSxHQUFHO29CQUNsQyw4QkFBOEIsRUFBRSxpQ0FBaUM7b0JBQ2pFLDhCQUE4QixFQUFFLDZCQUE2QjtpQkFDOUQ7Z0JBQ0QsSUFBSSxFQUFFLEVBQUU7YUFDVCxDQUFDO1FBQ0osQ0FBQztRQUVELE1BQU0sVUFBVSxHQUFHLElBQUEsa0JBQVcsRUFBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGFBQWEsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzNGLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDeEIsT0FBTyxJQUFBLDJCQUFtQixFQUFDLEdBQUcsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUNsRCxDQUFDO1FBRUQsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU8sQ0FBQztRQUNsQyxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO1FBRWhDLFFBQVEsTUFBTSxFQUFFLENBQUM7WUFDZixLQUFLLEtBQUs7Z0JBQ1IsT0FBTyxNQUFNLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNuQyxLQUFLLE1BQU07Z0JBQ1QsSUFBSSxXQUFXLEdBQUcsRUFBRSxD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Q2YsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEMsT0FBTyxJQUFBLDJCQUFtQixFQUFDLEdBQUcsRUFBRSxrQ0FBa0MsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBJR2F0ZXdheVByb3h5RXZlbnQsIEFQSUdhdGV3YXlQcm94eVJlc3VsdCB9IGZyb20gJ2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgUHV0Q29tbWFuZCwgUXVlcnlDb21tYW5kIH0gZnJvbSAnQGF3cy1zZGsvbGliLWR5bmFtb2RiJztcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gJ3V1aWQnO1xuaW1wb3J0IHsgZG9jQ2xpZW50LCBUQUJMRV9OQU1FUyB9IGZyb20gJy4vc2hhcmVkL2RhdGFiYXNlJztcbmltcG9ydCB7IHZlcmlmeVRva2VuIH0gZnJvbSAnLi9zaGFyZWQvYXV0aCc7XG5pbXBvcnQgeyBnZW5lcmF0ZVBlcnNvbmFsaXR5QW5hbHlzaXMgfSBmcm9tICcuL3NoYXJlZC9iZWRyb2NrJztcbmltcG9ydCB7IGNyZWF0ZUVycm9yUmVzcG9uc2UsIGNyZWF0ZVN1Y2Nlc3NSZXNwb25zZSB9IGZyb20gJy4vc2hhcmVkL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IEFQSUdhdGV3YXlQcm94eUV2ZW50KTogUHJvbWlzZTxBUElHYXRld2F5UHJveHlSZXN1bHQ+ID0+IHtcbiAgdHJ5IHtcbiAgICBpZiAoZXZlbnQuaHR0cE1ldGhvZCA9PT0gJ09QVElPTlMnKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJzogJyonLFxuICAgICAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzJzogJ0dFVCwgUE9TVCwgUFVULCBERUxFVEUsIE9QVElPTlMnLFxuICAgICAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzJzogJ0NvbnRlbnQtVHlwZSwgQXV0aG9yaXphdGlvbicsXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6ICcnXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNvbnN0IGF1dGhSZXN1bHQgPSB2ZXJpZnlUb2tlbihldmVudC5oZWFkZXJzLkF1dGhvcml6YXRpb24gfHwgZXZlbnQuaGVhZGVycy5hdXRob3JpemF0aW9uKTtcbiAgICBpZiAoIWF1dGhSZXN1bHQuc3VjY2Vzcykge1xuICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoNDAxLCAnVW5hdXRob3JpemVkJyk7XG4gICAgfVxuXG4gICAgY29uc3QgdXNlcklkID0gYXV0aFJlc3VsdC51c2VySWQhO1xuICAgIGNvbnN0IG1ldGhvZCA9IGV2ZW50Lmh0dHBNZXRob2Q7XG5cbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgY2FzZSAnR0VUJzpcbiAgICAgICAgcmV0dXJuIGF3YWl0IGdldEFuYWx5c2lzKHVzZXJJZCk7XG4gICAgICBjYXNlICdQT1NUJzpcbiAgICAgICAgbGV0IHJlcXVlc3RCb2R5ID0ge307XG4gICAgICAgIGlmIChldmVudC5ib2R5KSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlcXVlc3RCb2R5ID0gSlNPTi5wYXJzZShldmVudC5ib2R5KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoNDAwLCAnSW52YWxpZCBKU09OIGluIHJlcXVlc3QgYm9keScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgY3JlYXRlQW5hbHlzaXModXNlcklkLCByZXF1ZXN0Qm9keSBhcyBhbnkpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoNDA1LCAnTWV0aG9kIG5vdCBhbGxvd2VkJyk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOicsIGVycm9yKTtcbiAgICByZXR1cm4gY3JlYXRlRXJyb3JSZXNwb25zZSg1MDAsICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InKTtcbiAgfVxufTtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0QW5hbHlzaXModXNlcklkOiBzdHJpbmcpIHtcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZG9jQ2xpZW50LnNlbmQobmV3IFF1ZXJ5Q29tbWFuZCh7XG4gICAgVGFibGVOYW1lOiBUQUJMRV9OQU1FUy5BTkFMWVNJUyxcbiAgICBJbmRleE5hbWU6ICd1c2VySWQtaW5kZXgnLFxuICAgIEtleUNvbmRpdGlvbkV4cHJlc3Npb246ICd1c2VySWQgPSA6dXNlcklkJyxcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7XG4gICAgICAnOnVzZXJJZCc6IHVzZXJJZCxcbiAgICB9LFxuICB9KSk7XG5cbiAgcmV0dXJuIGNyZWF0ZVN1Y2Nlc3NSZXNwb25zZSh7XG4gICAgYW5hbHlzZXM6IChyZXN1bHQgYXMgYW55KS5JdGVtcyB8fCBbXSxcbiAgICB0b3RhbDogKHJlc3VsdCBhcyBhbnkpLkNvdW50IHx8IDAsXG4gIH0pO1xufVxuXG5pbnRlcmZhY2UgQW5hbHlzaXNSZXF1ZXN0IHtcbiAgZG9jdW1lbnRzOiBBcnJheTx7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgY29udGVudDogc3RyaW5nO1xuICB9Pjtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlQW5hbHlzaXModXNlcklkOiBzdHJpbmcsIGJvZHk6IGFueSkge1xuICAvLyBHZXQgdXNlcidzIGRvY3VtZW50cyBmcm9tIGRhdGFiYXNlXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRvY0NsaWVudC5zZW5kKG5ldyBRdWVyeUNvbW1hbmQoe1xuICAgIFRhYmxlTmFtZTogVEFCTEVfTkFNRVMuRE9DVU1FTlRTLFxuICAgIEluZGV4TmFtZTogJ3VzZXJJZC1pbmRleCcsXG4gICAgS2V5Q29uZGl0aW9uRXhwcmVzc2lvbjogJ3VzZXJJZCA9IDp1c2VySWQnLFxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IHtcbiAgICAgICc6dXNlcklkJzogdXNlcklkLFxuICAgIH0sXG4gIH0pKTtcblxuICBjb25zdCBkb2N1bWVudHMgPSAoKHJlc3VsdCBhcyBhbnkpLkl0ZW1zIHx8IFtdKSBhcyBhbnlbXTtcbiAgXG4gIGlmIChkb2N1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoNDAwLCAnTm8gZG9jdW1lbnRzIGZvdW5kIGZvciBhbmFseXNpcycpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBhbmFseXNpc1Jlc3VsdCA9IGF3YWl0IGdlbmVyYXRlUGVyc29uYWxpdHlBbmFseXNpcyh7IGRvY3VtZW50cyB9KTtcbiAgICBjb25zdCBhbmFseXNpc0lkID0gdXVpZHY0KCk7XG5cbiAgICBjb25zdCBhbmFseXNpcyA9IHtcbiAgICAgIGFuYWx5c2lzSWQsXG4gICAgICB1c2VySWQsXG4gICAgICByZXN1bHQ6IGFuYWx5c2lzUmVzdWx0LFxuICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgfTtcblxuICAgIGF3YWl0IGRvY0NsaWVudC5zZW5kKG5ldyBQdXRDb21tYW5kKHtcbiAgICAgIFRhYmxlTmFtZTogVEFCTEVfTkFNRVMuQU5BTFlTSVMsXG4gICAgICBJdGVtOiBhbmFseXNpcyxcbiAgICB9KSk7XG5cbiAgICByZXR1cm4gY3JlYXRlU3VjY2Vzc1Jlc3BvbnNlKGFuYWx5c2lzLCAyMDEpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0FJIOu2hOyEnSDsi6TtjKg6JywgZXJyb3IpO1xuICAgIHJldHVybiBjcmVhdGVFcnJvclJlc3BvbnNlKDUwMCwgJ0FJIOu2hOyEnSDshJzruYTsiqQg7J287IucIOykkeuLqC4g7J6g7IucIO2bhCDri6Tsi5wg7Iuc64+E7ZW07KO87IS47JqULicpO1xuICB9XG59Il19
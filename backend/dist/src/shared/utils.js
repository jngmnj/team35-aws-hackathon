"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHeaders = getHeaders;
exports.createResponse = createResponse;
exports.createErrorResponse = createErrorResponse;
exports.createSuccessResponse = createSuccessResponse;
function getHeaders() {
    return {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    };
}
function createResponse(statusCode, data) {
    try {
        const responseData = {
            ...data,
            timestamp: new Date().toISOString()
        };
        return {
            statusCode,
            headers: getHeaders(),
            body: JSON.stringify(responseData),
        };
    }
    catch (error) {
        console.error('JSON serialization error:', error);
        return {
            statusCode: 500,
            headers: getHeaders(),
            body: JSON.stringify({
                success: false,
                error: {
                    code: 'SERIALIZATION_ERROR',
                    message: 'Serialization error'
                },
                timestamp: new Date().toISOString()
            }),
        };
    }
}
function createErrorResponse(statusCode, message, code, details) {
    return createResponse(statusCode, {
        success: false,
        error: {
            code: code || getErrorCode(statusCode),
            message,
            ...(details && { details })
        },
    });
}
function createSuccessResponse(data, statusCode = 200, message) {
    return createResponse(statusCode, {
        success: true,
        data,
        ...(message && { message })
    });
}
function getErrorCode(statusCode) {
    switch (statusCode) {
        case 400: return 'BAD_REQUEST';
        case 401: return 'UNAUTHORIZED';
        case 403: return 'FORBIDDEN';
        case 404: return 'NOT_FOUND';
        case 409: return 'CONFLICT';
        case 429: return 'TOO_MANY_REQUESTS';
        case 500: return 'INTERNAL_SERVER_ERROR';
        default: return 'UNKNOWN_ERROR';
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2hhcmVkL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsZ0NBT0M7QUFFRCx3Q0EwQkM7QUFFRCxrREFTQztBQUVELHNEQU1DO0FBdERELFNBQWdCLFVBQVU7SUFDeEIsT0FBTztRQUNMLGNBQWMsRUFBRSxrQkFBa0I7UUFDbEMsNkJBQTZCLEVBQUUsR0FBRztRQUNsQyw4QkFBOEIsRUFBRSxpQ0FBaUM7UUFDakUsOEJBQThCLEVBQUUsNkJBQTZCO0tBQzlELENBQUM7QUFDSixDQUFDO0FBRUQsU0FBZ0IsY0FBYyxDQUFDLFVBQWtCLEVBQUUsSUFBNkI7SUFDOUUsSUFBSSxDQUFDO1FBQ0gsTUFBTSxZQUFZLEdBQUc7WUFDbkIsR0FBRyxJQUFJO1lBQ1AsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFO1NBQ3BDLENBQUM7UUFDRixPQUFPO1lBQ0wsVUFBVTtZQUNWLE9BQU8sRUFBRSxVQUFVLEVBQUU7WUFDckIsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO1NBQ25DLENBQUM7SUFDSixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsMkJBQTJCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEQsT0FBTztZQUNMLFVBQVUsRUFBRSxHQUFHO1lBQ2YsT0FBTyxFQUFFLFVBQVUsRUFBRTtZQUNyQixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDbkIsT0FBTyxFQUFFLEtBQUs7Z0JBQ2QsS0FBSyxFQUFFO29CQUNMLElBQUksRUFBRSxxQkFBcUI7b0JBQzNCLE9BQU8sRUFBRSxxQkFBcUI7aUJBQy9CO2dCQUNELFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRTthQUNwQyxDQUFDO1NBQ0gsQ0FBQztJQUNKLENBQUM7QUFDSCxDQUFDO0FBRUQsU0FBZ0IsbUJBQW1CLENBQUMsVUFBa0IsRUFBRSxPQUFlLEVBQUUsSUFBYSxFQUFFLE9BQWlCO0lBQ3ZHLE9BQU8sY0FBYyxDQUFDLFVBQVUsRUFBRTtRQUNoQyxPQUFPLEVBQUUsS0FBSztRQUNkLEtBQUssRUFBRTtZQUNMLElBQUksRUFBRSxJQUFJLElBQUksWUFBWSxDQUFDLFVBQVUsQ0FBQztZQUN0QyxPQUFPO1lBQ1AsR0FBRyxDQUFDLE9BQU8sSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDO1NBQzVCO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELFNBQWdCLHFCQUFxQixDQUFDLElBQWEsRUFBRSxhQUFxQixHQUFHLEVBQUUsT0FBZ0I7SUFDN0YsT0FBTyxjQUFjLENBQUMsVUFBVSxFQUFFO1FBQ2hDLE9BQU8sRUFBRSxJQUFJO1FBQ2IsSUFBSTtRQUNKLEdBQUcsQ0FBQyxPQUFPLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQztLQUM1QixDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUMsVUFBa0I7SUFDdEMsUUFBUSxVQUFVLEVBQUUsQ0FBQztRQUNuQixLQUFLLEdBQUcsQ0FBQyxDQUFDLE9BQU8sYUFBYSxDQUFDO1FBQy9CLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxjQUFjLENBQUM7UUFDaEMsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLFdBQVcsQ0FBQztRQUM3QixLQUFLLEdBQUcsQ0FBQyxDQUFDLE9BQU8sV0FBVyxDQUFDO1FBQzdCLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxVQUFVLENBQUM7UUFDNUIsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLG1CQUFtQixDQUFDO1FBQ3JDLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyx1QkFBdUIsQ0FBQztRQUN6QyxPQUFPLENBQUMsQ0FBQyxPQUFPLGVBQWUsQ0FBQztJQUNsQyxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBnZXRIZWFkZXJzKCkge1xuICByZXR1cm4ge1xuICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbic6ICcqJyxcbiAgICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kcyc6ICdHRVQsIFBPU1QsIFBVVCwgREVMRVRFLCBPUFRJT05TJyxcbiAgICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycyc6ICdDb250ZW50LVR5cGUsIEF1dGhvcml6YXRpb24nLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmVzcG9uc2Uoc3RhdHVzQ29kZTogbnVtYmVyLCBkYXRhOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPikge1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHtcbiAgICAgIC4uLmRhdGEsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1c0NvZGUsXG4gICAgICBoZWFkZXJzOiBnZXRIZWFkZXJzKCksXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXNwb25zZURhdGEpLFxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignSlNPTiBzZXJpYWxpemF0aW9uIGVycm9yOicsIGVycm9yKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzQ29kZTogNTAwLFxuICAgICAgaGVhZGVyczogZ2V0SGVhZGVycygpLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBcbiAgICAgICAgc3VjY2VzczogZmFsc2UsIFxuICAgICAgICBlcnJvcjogeyBcbiAgICAgICAgICBjb2RlOiAnU0VSSUFMSVpBVElPTl9FUlJPUicsXG4gICAgICAgICAgbWVzc2FnZTogJ1NlcmlhbGl6YXRpb24gZXJyb3InIFxuICAgICAgICB9LFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSksXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRXJyb3JSZXNwb25zZShzdGF0dXNDb2RlOiBudW1iZXIsIG1lc3NhZ2U6IHN0cmluZywgY29kZT86IHN0cmluZywgZGV0YWlscz86IHVua25vd24pIHtcbiAgcmV0dXJuIGNyZWF0ZVJlc3BvbnNlKHN0YXR1c0NvZGUsIHtcbiAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICBlcnJvcjogeyBcbiAgICAgIGNvZGU6IGNvZGUgfHwgZ2V0RXJyb3JDb2RlKHN0YXR1c0NvZGUpLFxuICAgICAgbWVzc2FnZSxcbiAgICAgIC4uLihkZXRhaWxzICYmIHsgZGV0YWlscyB9KVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3VjY2Vzc1Jlc3BvbnNlKGRhdGE6IHVua25vd24sIHN0YXR1c0NvZGU6IG51bWJlciA9IDIwMCwgbWVzc2FnZT86IHN0cmluZykge1xuICByZXR1cm4gY3JlYXRlUmVzcG9uc2Uoc3RhdHVzQ29kZSwge1xuICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgZGF0YSxcbiAgICAuLi4obWVzc2FnZSAmJiB7IG1lc3NhZ2UgfSlcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEVycm9yQ29kZShzdGF0dXNDb2RlOiBudW1iZXIpOiBzdHJpbmcge1xuICBzd2l0Y2ggKHN0YXR1c0NvZGUpIHtcbiAgICBjYXNlIDQwMDogcmV0dXJuICdCQURfUkVRVUVTVCc7XG4gICAgY2FzZSA0MDE6IHJldHVybiAnVU5BVVRIT1JJWkVEJztcbiAgICBjYXNlIDQwMzogcmV0dXJuICdGT1JCSURERU4nO1xuICAgIGNhc2UgNDA0OiByZXR1cm4gJ05PVF9GT1VORCc7XG4gICAgY2FzZSA0MDk6IHJldHVybiAnQ09ORkxJQ1QnO1xuICAgIGNhc2UgNDI5OiByZXR1cm4gJ1RPT19NQU5ZX1JFUVVFU1RTJztcbiAgICBjYXNlIDUwMDogcmV0dXJuICdJTlRFUk5BTF9TRVJWRVJfRVJST1InO1xuICAgIGRlZmF1bHQ6IHJldHVybiAnVU5LTk9XTl9FUlJPUic7XG4gIH1cbn0iXX0=
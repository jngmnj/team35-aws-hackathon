"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHeaders = getHeaders;
exports.createResponse = createResponse;
exports.createErrorResponse = createErrorResponse;
exports.createSuccessResponse = createSuccessResponse;
function getHeaders() {
    return {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    };
}
function createResponse(statusCode, data) {
    try {
        const responseData = {
            ...data,
            timestamp: new Date().toISOString()
        };
        return {
            statusCode,
            headers: getHeaders(),
            body: JSON.stringify(responseData),
        };
    }
    catch (error) {
        console.error('JSON serialization error:', error);
        return {
            statusCode: 500,
            headers: getHeaders(),
            body: JSON.stringify({
                success: false,
                error: {
                    code: 'SERIALIZATION_ERROR',
                    message: 'Serialization error'
                },
                timestamp: new Date().toISOString()
            }),
        };
    }
}
function createErrorResponse(statusCode, message, code, details) {
    const errorObj = {
        code: code || getErrorCode(statusCode),
        message
    };
    if (details) {
        errorObj.details = details;
    }
    return createResponse(statusCode, {
        success: false,
        error: errorObj
    });
}
function createSuccessResponse(data, statusCode = 200, message) {
    const responseObj = {
        success: true,
        data
    };
    if (message) {
        responseObj.message = message;
    }
    return createResponse(statusCode, responseObj);
}
function getErrorCode(statusCode) {
    switch (statusCode) {
        case 400: return 'BAD_REQUEST';
        case 401: return 'UNAUTHORIZED';
        case 403: return 'FORBIDDEN';
        case 404: return 'NOT_FOUND';
        case 409: return 'CONFLICT';
        case 429: return 'TOO_MANY_REQUESTS';
        case 500: return 'INTERNAL_SERVER_ERROR';
        default: return 'UNKNOWN_ERROR';
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2hhcmVkL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsZ0NBT0M7QUFFRCx3Q0EwQkM7QUFFRCxrREFjQztBQUVELHNEQVdDO0FBaEVELFNBQWdCLFVBQVU7SUFDeEIsT0FBTztRQUNMLGNBQWMsRUFBRSxrQkFBa0I7UUFDbEMsNkJBQTZCLEVBQUUsR0FBRztRQUNsQyw4QkFBOEIsRUFBRSxpQ0FBaUM7UUFDakUsOEJBQThCLEVBQUUsNkJBQTZCO0tBQzlELENBQUM7QUFDSixDQUFDO0FBRUQsU0FBZ0IsY0FBYyxDQUFDLFVBQWtCLEVBQUUsSUFBNkI7SUFDOUUsSUFBSSxDQUFDO1FBQ0gsTUFBTSxZQUFZLEdBQUc7WUFDbkIsR0FBRyxJQUFJO1lBQ1AsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFO1NBQ3BDLENBQUM7UUFDRixPQUFPO1lBQ0wsVUFBVTtZQUNWLE9BQU8sRUFBRSxVQUFVLEVBQUU7WUFDckIsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO1NBQ25DLENBQUM7SUFDSixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsMkJBQTJCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEQsT0FBTztZQUNMLFVBQVUsRUFBRSxHQUFHO1lBQ2YsT0FBTyxFQUFFLFVBQVUsRUFBRTtZQUNyQixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDbkIsT0FBTyxFQUFFLEtBQUs7Z0JBQ2QsS0FBSyxFQUFFO29CQUNMLElBQUksRUFBRSxxQkFBcUI7b0JBQzNCLE9BQU8sRUFBRSxxQkFBcUI7aUJBQy9CO2dCQUNELFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRTthQUNwQyxDQUFDO1NBQ0gsQ0FBQztJQUNKLENBQUM7QUFDSCxDQUFDO0FBRUQsU0FBZ0IsbUJBQW1CLENBQUMsVUFBa0IsRUFBRSxPQUFlLEVBQUUsSUFBYSxFQUFFLE9BQWlCO0lBQ3ZHLE1BQU0sUUFBUSxHQUE0QjtRQUN4QyxJQUFJLEVBQUUsSUFBSSxJQUFJLFlBQVksQ0FBQyxVQUFVLENBQUM7UUFDdEMsT0FBTztLQUNSLENBQUM7SUFFRixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ1osUUFBUSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDN0IsQ0FBQztJQUVELE9BQU8sY0FBYyxDQUFDLFVBQVUsRUFBRTtRQUNoQyxPQUFPLEVBQUUsS0FBSztRQUNkLEtBQUssRUFBRSxRQUFRO0tBQ2hCLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxTQUFnQixxQkFBcUIsQ0FBQyxJQUFhLEVBQUUsYUFBcUIsR0FBRyxFQUFFLE9BQWdCO0lBQzdGLE1BQU0sV0FBVyxHQUE0QjtRQUMzQyxPQUFPLEVBQUUsSUFBSTtRQUNiLElBQUk7S0FDTCxDQUFDO0lBRUYsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUNaLFdBQVcsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxPQUFPLGNBQWMsQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDakQsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFDLFVBQWtCO0lBQ3RDLFFBQVEsVUFBVSxFQUFFLENBQUM7UUFDbkIsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLGFBQWEsQ0FBQztRQUMvQixLQUFLLEdBQUcsQ0FBQyxDQUFDLE9BQU8sY0FBYyxDQUFDO1FBQ2hDLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxXQUFXLENBQUM7UUFDN0IsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLFdBQVcsQ0FBQztRQUM3QixLQUFLLEdBQUcsQ0FBQyxDQUFDLE9BQU8sVUFBVSxDQUFDO1FBQzVCLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxtQkFBbUIsQ0FBQztRQUNyQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLE9BQU8sdUJBQXVCLENBQUM7UUFDekMsT0FBTyxDQUFDLENBQUMsT0FBTyxlQUFlLENBQUM7SUFDbEMsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZ2V0SGVhZGVycygpIHtcbiAgcmV0dXJuIHtcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKicsXG4gICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHMnOiAnR0VULCBQT1NULCBQVVQsIERFTEVURSwgT1BUSU9OUycsXG4gICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnMnOiAnQ29udGVudC1UeXBlLCBBdXRob3JpemF0aW9uJyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlc3BvbnNlKHN0YXR1c0NvZGU6IG51bWJlciwgZGF0YTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4pOiB7IHN0YXR1c0NvZGU6IG51bWJlcjsgaGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPjsgYm9keTogc3RyaW5nIH0ge1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHtcbiAgICAgIC4uLmRhdGEsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1c0NvZGUsXG4gICAgICBoZWFkZXJzOiBnZXRIZWFkZXJzKCksXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXNwb25zZURhdGEpLFxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignSlNPTiBzZXJpYWxpemF0aW9uIGVycm9yOicsIGVycm9yKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzQ29kZTogNTAwLFxuICAgICAgaGVhZGVyczogZ2V0SGVhZGVycygpLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBcbiAgICAgICAgc3VjY2VzczogZmFsc2UsIFxuICAgICAgICBlcnJvcjogeyBcbiAgICAgICAgICBjb2RlOiAnU0VSSUFMSVpBVElPTl9FUlJPUicsXG4gICAgICAgICAgbWVzc2FnZTogJ1NlcmlhbGl6YXRpb24gZXJyb3InIFxuICAgICAgICB9LFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSksXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRXJyb3JSZXNwb25zZShzdGF0dXNDb2RlOiBudW1iZXIsIG1lc3NhZ2U6IHN0cmluZywgY29kZT86IHN0cmluZywgZGV0YWlscz86IHVua25vd24pOiB7IHN0YXR1c0NvZGU6IG51bWJlcjsgaGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPjsgYm9keTogc3RyaW5nIH0ge1xuICBjb25zdCBlcnJvck9iajogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gPSB7XG4gICAgY29kZTogY29kZSB8fCBnZXRFcnJvckNvZGUoc3RhdHVzQ29kZSksXG4gICAgbWVzc2FnZVxuICB9O1xuICBcbiAgaWYgKGRldGFpbHMpIHtcbiAgICBlcnJvck9iai5kZXRhaWxzID0gZGV0YWlscztcbiAgfVxuICBcbiAgcmV0dXJuIGNyZWF0ZVJlc3BvbnNlKHN0YXR1c0NvZGUsIHtcbiAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICBlcnJvcjogZXJyb3JPYmpcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdWNjZXNzUmVzcG9uc2UoZGF0YTogdW5rbm93biwgc3RhdHVzQ29kZTogbnVtYmVyID0gMjAwLCBtZXNzYWdlPzogc3RyaW5nKTogeyBzdGF0dXNDb2RlOiBudW1iZXI7IGhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz47IGJvZHk6IHN0cmluZyB9IHtcbiAgY29uc3QgcmVzcG9uc2VPYmo6IFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0ge1xuICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgZGF0YVxuICB9O1xuICBcbiAgaWYgKG1lc3NhZ2UpIHtcbiAgICByZXNwb25zZU9iai5tZXNzYWdlID0gbWVzc2FnZTtcbiAgfVxuICBcbiAgcmV0dXJuIGNyZWF0ZVJlc3BvbnNlKHN0YXR1c0NvZGUsIHJlc3BvbnNlT2JqKTtcbn1cblxuZnVuY3Rpb24gZ2V0RXJyb3JDb2RlKHN0YXR1c0NvZGU6IG51bWJlcik6IHN0cmluZyB7XG4gIHN3aXRjaCAoc3RhdHVzQ29kZSkge1xuICAgIGNhc2UgNDAwOiByZXR1cm4gJ0JBRF9SRVFVRVNUJztcbiAgICBjYXNlIDQwMTogcmV0dXJuICdVTkFVVEhPUklaRUQnO1xuICAgIGNhc2UgNDAzOiByZXR1cm4gJ0ZPUkJJRERFTic7XG4gICAgY2FzZSA0MDQ6IHJldHVybiAnTk9UX0ZPVU5EJztcbiAgICBjYXNlIDQwOTogcmV0dXJuICdDT05GTElDVCc7XG4gICAgY2FzZSA0Mjk6IHJldHVybiAnVE9PX01BTllfUkVRVUVTVFMnO1xuICAgIGNhc2UgNTAwOiByZXR1cm4gJ0lOVEVSTkFMX1NFUlZFUl9FUlJPUic7XG4gICAgZGVmYXVsdDogcmV0dXJuICdVTktOT1dOX0VSUk9SJztcbiAgfVxufSJdfQ==